package ${generator.packageName}.service#if(${generator.subModule}).${generator.subModuleName}#end.impl;

import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import ${generator.entityPackageName}.entity#if(${generator.subModule}).${generator.subModuleName}#end.${table.tableModuleName}Entity;
import ${generator.packageName}.mapper#if(${generator.subModule}).${generator.subModuleName}#end.${table.tableModuleName}Mapper;
import ${generator.packageName}.service#if(${generator.subModule}).${generator.subModuleName}#end.${table.tableModuleName}Service;

import lombok.extern.slf4j.Slf4j;
/**
 * ${table.tableComment}接口实现
 *
 * @author ${generator.author}
 * @date ${date}
 */
@Slf4j
@Service
public class ${table.tableModuleName}ServiceImpl implements ${table.tableModuleName}Service {
    @Autowired
    private ${table.tableModuleName}Mapper ${table.tableModuleName2}Mapper;

    @Override
    public Integer query${table.tableModuleName}Count(Map<String, Object> map) {
        return ${table.tableModuleName2}Mapper.query${table.tableModuleName}Count(map);
    }

    @Override
    public List<${table.tableModuleName}Entity> query${table.tableModuleName}List(Map<String, Object> map) {
        return ${table.tableModuleName2}Mapper.query${table.tableModuleName}List(map);
    }

    @Override
    public ${table.tableModuleName}Entity get${table.tableModuleName}ById(${table.priColumn.propertyType} ${table.priColumn.propertyName}) {
        return ${table.tableModuleName2}Mapper.get${table.tableModuleName}ById(${table.priColumn.propertyName});
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int insert${table.tableModuleName}(${table.tableModuleName}Entity ${table.tableModuleName2}Entity) {
        return ${table.tableModuleName2}Mapper.insert${table.tableModuleName}(${table.tableModuleName2}Entity);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int batchInsert${table.tableModuleName}(List<${table.tableModuleName}Entity> ${table.tableModuleName2}Entitys) {
        return ${table.tableModuleName2}Mapper.batchInsert${table.tableModuleName}(${table.tableModuleName2}Entitys);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int update${table.tableModuleName}(${table.tableModuleName}Entity ${table.tableModuleName2}Entity) {
        return ${table.tableModuleName2}Mapper.update${table.tableModuleName}(${table.tableModuleName2}Entity);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int delete${table.tableModuleName}(Set<${table.priColumn.propertyType}> ${table.priColumn.propertyName}s) {
        return ${table.tableModuleName2}Mapper.delete${table.tableModuleName}(${table.priColumn.propertyName}s#if(${table.updateUserColumn}), null#end#if(${table.updateTimeColumn}), null#end);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public String importExcel(MultipartFile file) {
        return null;
    }

    @Override
    public void exportExcel(HttpServletResponse response, Map<String, Object> map) {

    }
}